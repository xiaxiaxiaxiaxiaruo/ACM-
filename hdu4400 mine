#include<iostream>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<algorithm>
#include<cstring>
#include<queue>

using namespace std;

const int N=100000+5;

struct Mine{
    int x,y,d;
    Mine(){
    };
    Mine(int x,int y,int d):x(x),y(y),d(d){
    };
}mines[N];

struct node{
    int y;
    int id;
    node(){
    };
    node(int y):y(y){
    };
    node(int y,int id):y(y),id(id){
    };
    friend bool operator < (node a,node b){
        return a.y<b.y;
    };
    
};
bool exist[N];
int n,m;
map<int,int>mpx;
vector<int>xi;
multiset<node> s[N];
void init(){
    memset(exist,true,sizeof exist);
    xi.clear();
    mpx.clear();
    for(int i=0;i<=n;++i)
    {
        s[i].clear();
    }
    
}

void work(int cur){
    queue<int>Q;
    Q.push(cur);
    int ans=0;
    exist[cur]=false;
    int tmp;//当前要引爆的点
    int lx,rx;
    int dy;//当dx确定后剩余在y轴上的范围
    int ly,ry;
    multiset<node> ::iterator l,r,it;
    while (!Q.empty()) {
        tmp=Q.front();Q.pop();
        ans++;//
       // printf("now to boom:id=%d\n",tmp);
        lx=mines[tmp].x-mines[tmp].d;
        rx=mines[tmp].x+mines[tmp].d;
       // printf("x= %d d= %d\n",mines[tmp].x,mines[tmp].d);

       // printf("x's left to right %d %d\n",lx,rx);
        lx=lower_bound(xi.begin(), xi.end(), lx)-xi.begin();
        rx=upper_bound(xi.begin(), xi.end(), rx)-xi.begin();
        //printf("in set S's left to right %d %d\n",lx,rx);
        for(int i=lx;i<rx;i++){
            dy=mines[tmp].d-abs(mines[tmp].x-xi[i]);
        //    printf("i=%d, x=%d, dy=%d\n",i,xi[i],dy);
            ly=mines[tmp].y-dy;
            ry=mines[tmp].y+dy;
         //   printf("y's left to right %d %d\n",ly,ry);
            l=s[i].lower_bound(ly);
            r=s[i].upper_bound(ry);
            for(it=l;it!=r;++it){
                if(exist[it->id]){
                    exist[it->id]=false;
                    Q.push(it->id);//波及范围内的炸弹入队
          //          printf("Q.push(%d)\n",it->id);
                }
            }
            s[i].erase(l, r);
        }
    }
    printf("%d\n",ans);
}
int main(){
    int a,b,c;
    int count=0;
    while(cin>>n,n){
        init();
        for(int i=0;i<n;i++){
            scanf("%d%d%d",&a,&b,&c);
            mines[i]=Mine(a,b,c);
            xi.push_back(a);
        }
        sort(xi.begin(),xi.end());
        xi.erase(unique(xi.begin(),xi.end()),xi.end());
        int cnt=0;
        for(int i=0;i<xi.size();i++){
            mpx[xi[i]]=cnt++;
        }
        map<int,int>::iterator it;
        //for(it=mpx.begin();it!=mpx.end();++it){
          //  cout<<it->first<<" "<<it->second<<endl;
        //}
        for(int i=0;i<n;i++){
            int p=mpx[mines[i].x];
            s[p].insert(node(mines[i].y,i));
        }
        cin>>m;
        printf("Case #%d:\n",++count);
        for(int i=1;i<=m;i++){
            scanf("%d",&a);
            a--;
            if(exist[a])
                work(a);
            else printf("0\n");
        }
        
        
    }
    return 0;
}
