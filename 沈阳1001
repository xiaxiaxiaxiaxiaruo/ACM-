#include<stdio.h>
#include<iostream>
#include<string.h>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
//hao 1  huai 2
int mem[10010];
vector<int>a[10010];
int n,m,x,y;
int solve(int x,int c);
int main(){
    while(scanf("%d%d%d%d",&n,&m,&x,&y)!=EOF){
        for(int i=0;i<=n+1;i++)    a[i].clear();
        memset(mem,0,sizeof(mem));
        for(int i=0;i<m;i++){
            int p,q;
            scanf("%d%d",&p,&q);
            mem[p] = mem[q] = -1;
            a[p].push_back(q);
            a[q].push_back(p);
        }
        queue<int>good;
        queue<int>bad;
        for(int i=0;i<x;i++){
            int t;
            scanf("%d",&t);
            mem[t] = 1;
            good.push(t);
        }
        for(int i=0;i<y;i++){
            int t;
            scanf("%d",&t);
            mem[t] = 2;
            bad.push(t);
        }
        int s = 0;
        for(int i=1;i<=n;i++){
            if(mem[i] == 0){
                s = 1;
                break;
            }
        }
        if(s == 0 ){
            while((!good.empty()||!bad.empty()) && s == 0){
                while(!good.empty() && s == 0){
                    int t = good.front();
                    for(int i=0;i<a[t].size();i++){
                        if(mem[a[t][i]] == 1){
                            s = 1;
                            break;
                        }
                        else if(mem[a[t][i]] != 2){
                            mem[a[t][i]] = 2;
                            bad.push(a[t][i]);
                        }
                    }
                    good.pop();        
                }
                while(!bad.empty() && s == 0){
                    int t = bad.front();
                    for(int i=0;i<a[t].size();i++){
                        if(mem[a[t][i]] == 2){
                            s = 1;
                            break;
                        }
                        else if(mem[a[t][i]] != 1){
                            mem[a[t][i]] = 2;
                            bad.push(a[t][i]);
                        }
                    }
                    bad.pop();
                }
            }
            if(s == 0){
                for(int i=1;i<=n;i++){
                    if(mem[i] == -1){
                        int temp = solve(i,1);
                        if(temp == 1){
                            temp = solve(i,2);
                            if(temp == 1){
                                s = 1;
                                break;
                            }
                        }
                    }
                }
            }
        }
        if(s)    printf("NO\n");
        else printf("YES\n");
    }
    return 0;
}
int solve(int x,int c){
    mem[x] = c;
    int t;
    if(c == 1)    t = 2;
    else t = 1;
    for(int i=0;i<a[x].size();i++){
        if(mem[a[x][i]] == t)    continue;
        else if(mem[a[x][i]] == c){
            mem[x] = -1;
            return 1;
        }
        else{
            int s = solve(a[x][i],t);
            if(s == 1){
                mem[x] = -1;
                return 1;
            }
        }
        
    }
    return 0;
}
